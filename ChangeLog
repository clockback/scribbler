# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased
## [0.1.4] - 2021-05-21
### Added
- Added the following component:
  - Speak: Allows the entity to speak words for a certain duration of time.
- Added the following action:
  - Speak: Creates a text block for the speak component and waits until the
    speech is finished before releasing the next event.

### Fixed
- The comma glyph had been omitted, despite having an associated image. Now the
  image has been mapped to a corresponding glyph.

## [0.1.3] - 2021-05-19
### Added
- The scenario handler now accepts actions, which are carried out sequentially.
  The following action has been added:
    - EntityJourneyTo: Commands the entity to travel to the destination.
    - SetUserInput: Allows or disallows the player entity to be commanded.
    - Wait: Stalls the action queue for a certain period of time.
- Action queues are collections of actions that have been duplicated from a
  scenario once the listener receives a response and the conditions are met.
- Actions can be handled asynchronously, so that multiple actions may occur at
  a time, despite being part of a single action queue.

### Changed

- Altering README.md for focus on engine and less on game.

### Fixed
- The memory comparison for the trigger and listener's particulars is now able
  to handle triggers of different sizes.
- Creating string objects from raw strings was allocated too little memory. An
  apporpiate amount is now assigned.
- If an entity moved out of the bounds of a plane without turning a corner, it
  would crash. This has been fixed by only updating the tile in the move
  component if the tile exists.

## [0.1.2] - 2021-05-18
### Added
- The scenario handler now accepts conditions, which must be fulfilled in order
  for a scenario's actions to be carried out. The following conditions have
  been added:
    - NumericEqualTo: Equivalent to a == comparison on doubles.
    - NumericGreaterThan: Equivalent to a > comparison on doubles.
    - NumericGreaterThanOrEqualTo: Equivalent to a >= comparison on doubles.
    - NumericLessThan: Equivalent to a < comparison on doubles.
    - NumericLessThanOrEqualTo: Equivalent to a <= comparison on doubles.
- The scenario handler now has getters for entities. The following entity
  getters have been added:
    - RawEntity: Returns the input entity.
    - EntityWithName: Searches for an entity with the input name.
- The scenario handler now has getters for numerics (doubles). The following
  numeric getters have been added:
    - RawNumeric: Returns the input numeric.
    - EntityGetX: Returns the x-position of the input entity.
    - EntityGetY: Returns the y-position of the input entity.
- The scenario handler now has getters for strings (character arrays). The
  following string getter has been added:
    - RawString: Returns the input character array.

## [0.1.1] - 2021-05-16
### Added
- Introducing framework for basic scenario handling. At present, triggers can
  be created due to certain things happening within the game. Each trigger has
  certain information that might be associated with it. Though not yet properly
  implemented, it will also use conditions to check other game state variables,
  and actions to respond to the triggers.

### Fixed
- Reintroduced scaling of player character (accidentally removed).

## [0.1.0] - 2021-05-08
### Added
- Implementing Io language, such that the game code is separated from the
  engine itself. A utils module is run, which creates all the core
  functionality for writing a game file. The game file itself defines all
  rooms, planes, and entities on the screen.
- Allowing apostrophes, hyphens, and speech marks in displayed text.

### Changed
- Reducing the width of the glyph for the letter 'r'.
- Text maximum width now takes effect. It will wrap text with a centered
  justification. Words that single-handedly exceed the width limit cause the
  game to raise an error.
- Increasing precision of Room scale-rate.

## [0.0.7] - 2021-04-18
### Added
- Creating .PNG glyphs for a font.
- Creating a font renderer and corresponding text object.
- The InteractComponent will, when its entity is hovered over, display a piece
  of text identifying the entity.

### Fixed
- Ensuring that the cursor is displayed in the right place, irrespective of the
  scaling value.
- Likewise ensuring that the entity over which the entity is hovering works for
  any scaling value.
- Fixed bug which caused unwalkable tiles on the border to have game-breaking
  click events when the mouse was closer to the border than the other side.
- Fixed bug causing the journey component to fail to assign the
  MappedComponent's tile's plane and the MappedComponent's plane to the same
  plane, resulting in somewhat rare but unusual plane-hopping.

## [0.0.6] - 2021-04-12
### Added
- Introducing an InteractComponent to compliment the ClickComponent. Presently,
  it introduces a state in the system according to which entity the user is
  possibly clicking on.
- The top-most entity with the cursor hovering over it affects the cursor.
- Two new images for the cursor. The default has been hidden.

### Fixed
- Previously, if an entity was walking towards an interaction point, then their
  movement was interrupted, they would retain the facing direction at the end
  of their walk. This has been removed.

## [0.0.5] - 2021-04-11
### Added
- Entities can now be clicked on for different behaviour to normal path
  finding. The player now walks below an entity when the entity is clicked
  upon, unless there is a user-defined interaction tile which indicates where
  the user must interact with the entity.
- When an unwalkable tile is selected, a bordering tile can contextually be
  allocated to the user instead.
- Copyright notices.
- Inclusion of GPLv3.
- Giving entities optional but unique id names.

### Fixed
- Using pow instead of powf when operating on doubles.
- Quick sort no longer fails when operating on arrays of less than two items.

## [0.0.4] - 2021-04-08
### Added
- Visual scaling is now automatically handled for any entity with a
  MappedComponent, and either a SpriteComponent or an AnimationComponent unless
  otherwise specified.

## [0.0.3] - 2021-04-08
### Added
- Each entity can now have its scale adjusted, whether through the
  AnimateComponent or the SpriteComponent.

### Changed
- The graphics are now rendered on a smaller screen, which is then scaled to a
  larger size to fit the window.

## [0.0.2] - 2021-04-07
### Added
- Using quicksort algorithm to sort entities in the world (as opposed to text,
  overlay, etc.) for display.
- Simple demonstration on a rubbish bin. The character can walk in front of and
  behind the bin.

### Changed
- The shoes shown in the images for the main character have been fixed.

### Fixed
- Forgot to set the number of planes to zero in a room upon initialization,
  resulting in run-time errors.

## [0.0.1] - 2021-04-05
### Added
- Entity-component system implemented with following components:
    - Mapped: The coordinates of the entity. Can be locked to a plane,
      therefore not necessarily the coordinates of the plane.
    - Move: The velocity of the entity. Operates on the Mapped entity.
    - Sprite: A single image used for a component.
    - Journey: A path-finder. Sets destinations for the entity and manipulates
      the Move component in order to reach them.
    - Animate: A collection of indexed images which are applied contextually.
- Rooms, which contain planes, which contain tiles, which contain tile edges.
- Simple pixel-art for a character.
